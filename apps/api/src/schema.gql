# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthType {
  refreshToken: String!
  session: Session!
  token: String!
}

""""""
input CreateAuthInput {
  """The email of the user"""
  email: String!

  """The password of the user"""
  password: String!
}

""""""
input CreateEventInput {
  """The banner of the event."""
  banner: String

  """The description of the event."""
  description: String

  """Whether the event is people sequence suggest limitable."""
  isPeopleSequenceSuggestLimitable: Boolean = false

  """The logo of the event."""
  logo: String

  """The name of the event."""
  name: String!

  """The number of people sequence suggest limit."""
  numberOfPeopleSequenceSuggestLimit: Float = 0

  """The slug of the event."""
  slug: String!
}

""""""
input CreateSongInput {
  """The artist of the song."""
  artist: String!

  """The duration of the song in seconds."""
  duration: Float!

  """The ID of the event associated with the song."""
  eventId: String!

  """The image URL of the song."""
  image: String

  """The name of the song."""
  name: String!

  """The Spotify ID of the song."""
  spotifyId: String!

  """The ID of the user who suggested the song."""
  suggestedById: String!

  """The name of the user who suggested the song."""
  suggestedByName: String!
}

""""""
input CreateUserInput {
  """The email of the user"""
  email: String!

  """The name of the user"""
  name: String!

  """The password of the user"""
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  banner: String!
  createdAt: DateTime!
  description: String!
  id: String!
  isOpenedToReceiveSuggestions: Boolean!
  isPeopleSequenceSuggestLimitable: Boolean!
  logo: String!
  name: String!
  numberOfPeopleSequenceSuggestLimit: Float!
  slug: String!
  songs: [Song!]!
  updatedAt: DateTime!
}

""""""
input FilterInput {
  """Filter"""
  filter: String! = ""

  """Limit"""
  limit: Float = 10

  """Page"""
  page: Float = 0
}

""""""
input FilterUserInput {
  """Limit"""
  limit: Float = 20

  """Filter"""
  name: String! = ""

  """Page"""
  page: Float = 0
}

type Mutation {
  activateUser(id: String!): User!
  blockUser(id: String!): User!
  createEvent(
    """Create a new collective sale"""
    input: CreateEventInput!
  ): Event!
  createSession(data: CreateAuthInput!): AuthType!
  createSong(
    """Create a new collective sale"""
    input: CreateSongInput!
  ): Song!
  createUser(
    """Create a new user"""
    input: CreateUserInput!
  ): User!
  refreshSession(refreshToken: String!): AuthType!
  resetPassword(
    """Reset user password"""
    input: ResetPasswordInput!
  ): Boolean!
  searchSpotify(query: String!): [SpotifySong!]!
  sendForgotPasswordEmail(email: String!): Boolean!
  setPlayedSong(id: String!): Song!
  setRejectedSong(id: String!): Song!
  toggleEventIsOpenedToReceiveSuggestions(id: String!): Event!
  updateAvatar(avatar: String!): User!
  updateEvent(input: UpdateEventInput!): Event!
  updateProfile(
    """Create a new user"""
    input: UpdateUserInput!
  ): User!
  updateRole(
    """Update user role"""
    input: UpdateRoleInput!
  ): User!
}

type Query {
  event(id: String!): Event!
  eventBySlug(slug: String!): Event!
  events(
    """Filtered a event"""
    filter: FilterInput = {}
  ): [Event!]!
  getTotalEvents(
    """Filtered a event"""
    filter: FilterInput = {}
  ): Float!
  getTotalSongs(
    """Filtered a song"""
    filter: FilterInput = {}
  ): Float!
  getTotalUsers(
    """Filtered a new client"""
    filter: FilterUserInput = {}
  ): Float!
  profile: User!
  session: Session!
  song(id: String!): Song!
  songs(
    """Filtered a song"""
    filter: FilterInput = {}
  ): [Song!]!
  user(id: String!): User!
  users(
    """Filtered a new client"""
    filter: FilterUserInput = {}
  ): [User!]!
}

""""""
input ResetPasswordInput {
  password: String!
  tokenId: String!
}

type Session {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User!
}

type Song {
  artist: String!
  createdAt: DateTime!
  duration: Float!
  event: Event!
  id: String!
  image: String
  isPlayed: Boolean!
  isRejected: Boolean!
  name: String!
  suggestedById: String!
  suggestedByName: String!
  updatedAt: DateTime!
}

type SpotifySong {
  artist: String!
  duration_ms: Float!
  id: String!
  image: String!
  name: String!
}

type Subscription {
  eventUpdated(slug: String!): Event!
  songAdded(eventId: String!): Song!
  songUpdated(eventId: String!): Song!
}

""""""
input UpdateEventInput {
  """The banner of the event."""
  banner: String

  """The description of the event."""
  description: String

  """Id of the event to update."""
  id: String!

  """Whether the event is people sequence suggest limitable."""
  isPeopleSequenceSuggestLimitable: Boolean = false

  """The logo of the event."""
  logo: String

  """The name of the event."""
  name: String!

  """The number of people sequence suggest limit."""
  numberOfPeopleSequenceSuggestLimit: Float = 0

  """The slug of the event."""
  slug: String!
}

""""""
input UpdateRoleInput {
  role: UpdateRoleInput_RoleEnum_0!
  userId: String!
}

"""Enum values for UpdateRoleInput.role"""
enum UpdateRoleInput_RoleEnum_0 {
  ADMIN
  DEFAULT
}

""""""
input UpdateUserInput {
  """The name of the user"""
  name: String
}

type User {
  activatedAt: DateTime
  avatarUrl: String
  blockedAt: DateTime
  createdAt: DateTime!
  email: String!
  id: String!
  ips: String!
  name: String!
  passwordUpdatedAt: DateTime!
  role: String!
  sessions: [Session!]!
  updatedAt: DateTime!
}