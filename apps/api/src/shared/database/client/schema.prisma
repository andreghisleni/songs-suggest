// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../src/shared/database/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name      String
  email     String  @unique
  avatarUrl String? @map("avatar_url")

  passwordHash String @map("password_hash")

  role UserRoles @default(DEFAULT)

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  passwordUpdatedAt DateTime @default(now()) @map("password_updated_at")

  activatedAt DateTime? @map("activated_at")
  blockedAt   DateTime? @map("blocked_at")

  tokens Token[]
  ips    Ip[]

  sessions Session[]

  @@map("users")
}

enum UserRoles {
  ADMIN
  DEFAULT
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

model Ip {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  ip    String
  local String

  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_ips")
}

model Session {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  // lastUpdatedToken DateTime? @map("last_updated_token")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model Event {
  id String @id @default(uuid())

  name String

  slug                               String  @unique
  logo                               String?
  banner                             String?
  description                        String?
  isOpenedToReceiveSuggestions       Boolean @default(false) @map("is_opened_to_receive_suggestions")
  isPeopleSequenceSuggestLimitable   Boolean @default(false) @map("is_people_sequence_suggest_limitable")
  numberOfPeopleSequenceSuggestLimit Int?    @map("number_of_people_sequence_suggest_limit")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  songs     Song[]

  @@map("events")
}

model Song {
  id String @id @default(uuid())

  spotifyId String  @map("spotify_id")
  name      String
  artist    String
  image     String?
  duration  Int

  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  suggestedById   String @map("suggested_by_id")
  suggestedByName String @map("suggested_by_name")

  isPlayed   Boolean @default(false) @map("is_played")
  isRejected Boolean @default(false) @map("is_rejected")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("songs")
}
